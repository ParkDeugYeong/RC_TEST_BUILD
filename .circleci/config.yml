version: 2.1

orbs:
  node: circleci/node@5.1.0

workflows:
  build-and-test:
    jobs:
      - lint-and-test
      - build-apk:
          requires:
            - lint-and-test
          filters:
            branches:
              only:
                - main

jobs:
  lint-and-test:
    docker:
      - image: cimg/node:18.20
    steps:
      - checkout

      # 0) 선탑재된 글로벌 yarn 제거 + Corepack 최신화
      - run:
          name: Remove global Yarn & enable Corepack
          command: |
            which yarn || true
            yarn --version || true
            # 글로벌 yarn 바이너리 제거(있어도 없어도 통과)
            sudo rm -f /usr/local/bin/yarn /usr/local/bin/yarnpkg || true
            # Corepack 최신화 및 활성화
            npm i -g corepack@latest
            corepack enable
            corepack prepare yarn@4.9.1 --activate
            # 셸 해시 초기화 및 버전 확인
            hash -r
            which yarn
            yarn --version
            # Yarn 4에서 node_modules 링크 사용
            yarn config set nodeLinker node-modules

      # 캐시 복원 (node_modules)
      - restore_cache:
          keys:
            - yarn-deps-{{ checksum "yarn.lock" }}
            - yarn-deps-

      # 의존성 설치
      - run:
          name: Install Dependencies
          command: |
            yarn install --immutable
            rm -rf node_modules/.cache

      # 캐시 저장
      - save_cache:
          key: yarn-deps-{{ checksum "yarn.lock" }}
          paths:
            - node_modules

      - run:
          name: TypeScript Type Check
          command: yarn tsc --noEmit

      - run:
          name: Run ESLint
          command: yarn lint

      - run:
          name: Run Tests
          command: |
            if [ -f "jest.config.js" ] || grep -q '"test"' package.json; then
              yarn test --watchAll=false
            else
              echo "No tests found, skipping..."
            fi

  build-apk:
    docker:
      - image: cimg/node:18.20
    steps:
      - checkout

      # 0) 선탑재된 글로벌 yarn 제거 + Corepack 최신화
      - run:
          name: Remove global Yarn & enable Corepack
          command: |
            sudo rm -f /usr/local/bin/yarn /usr/local/bin/yarnpkg || true
            npm i -g corepack@latest
            corepack enable
            corepack prepare yarn@4.9.1 --activate
            hash -r
            yarn --version
            yarn config set nodeLinker node-modules

      # 캐시 복원
      - restore_cache:
          keys:
            - yarn-deps-{{ checksum "yarn.lock" }}
            - yarn-deps-

      # 의존성 설치
      - run:
          name: Install Dependencies
          command: |
            yarn install --immutable
            rm -rf node_modules/.cache

      # 캐시 저장
      - save_cache:
          key: yarn-deps-{{ checksum "yarn.lock" }}
          paths:
            - node_modules

      # 유틸리티 설치
      - run:
          name: Install utilities (jq, curl)
          command: |
            sudo apt-get update
            sudo apt-get install -y jq curl

      # Expo 토큰 확인
      - run:
          name: Check EXPO_TOKEN
          command: |
            if [ -z "$EXPO_TOKEN" ]; then
              echo "ERROR: EXPO_TOKEN is not set"
              exit 1
            fi

      # ▶︎ Yarn 대신 npx로 EAS CLI 호출하여 Yarn 버전 의존 제거
      - run:
          name: Start Android APK Build (EAS)
          command: |
            export NODE_OPTIONS="--max-old-space-size=4096"
            echo "Starting EAS Build..."
            npx --yes eas-cli@16.17.4 build --platform android --profile apk --non-interactive --no-wait --json > build_result.json 2> build_result.err || true
            cat build_result.json || true
            if ! jq -e . build_result.json >/dev/null 2>&1; then
              echo "Failed to get JSON from build command"
              cat build_result.err || true
              exit 1
            fi
            if jq -e 'type=="array"' build_result.json >/dev/null 2>&1; then
              BUILD_ID=$(jq -r '.[0].id // "unknown"' build_result.json)
            else
              BUILD_ID=$(jq -r '.id // "unknown"' build_result.json)
            fi
            echo "$BUILD_ID" > build_id.txt
            echo "Build ID: $BUILD_ID"
          no_output_timeout: 10m

      - run:
          name: Wait for Build Completion
          command: |
            BUILD_ID=$(cat build_id.txt)
            for i in {1..45}; do
              echo "Check $i/45"
              # 우선 ID로 조회, 실패 시 리스트 폴백
              if ! npx --yes eas-cli@16.17.4 build:view "$BUILD_ID" --json > status_result.json 2> status_result.err; then
                npx --yes eas-cli@16.17.4 build:list --limit 5 --json > status_result.json 2> status_result.err || true
              fi
              # JSON 유효성 검증 (비-JSON 응답이면 재시도)
              if ! jq -e . status_result.json >/dev/null 2>&1; then
                echo "Non-JSON status response; retrying..."
                cat status_result.err || true
                cat status_result.json || true
                sleep 10
                continue
              fi
              if jq -e 'type=="array"' status_result.json >/dev/null 2>&1; then
                STATUS=$(jq -r '.[] | select(.id=="'"$BUILD_ID"'") | .status // empty' status_result.json)
              else
                STATUS=$(jq -r '.status // empty' status_result.json)
              fi
              STATUS_LOWER=$(echo "${STATUS:-unknown}" | tr '[:upper:]' '[:lower:]')
              echo "Status: $STATUS_LOWER"
              if [ "$STATUS_LOWER" = "finished" ]; then
                echo "Build finished"
                break
              elif [ "$STATUS_LOWER" = "errored" ] || [ "$STATUS_LOWER" = "canceled" ]; then
                echo "Build failed: $STATUS_LOWER"
                exit 1
              fi
              sleep 120
            done
            # 최종 조회(비치명적)
            npx --yes eas-cli@16.17.4 build:view "$BUILD_ID" --json > final_status.json 2>/dev/null || true
          no_output_timeout: 95m

      - run:
          name: Download APK
          command: |
            BUILD_ID=$(cat build_id.txt)
            npx --yes eas-cli@16.17.4 build:view "$BUILD_ID" --json > build_info.json 2> build_info.err || true
            if ! jq -e . build_info.json >/dev/null 2>&1; then
              echo "Failed to fetch build info JSON"
              cat build_info.err || true
              cat build_info.json || true
              exit 1
            fi
            if jq -e 'type=="array"' build_info.json >/dev/null 2>&1; then
              BUILD_URL=$(jq -r '.[0].artifacts.buildUrl // empty' build_info.json)
            else
              BUILD_URL=$(jq -r '.artifacts.buildUrl // empty' build_info.json)
            fi
            if [ -n "$BUILD_URL" ]; then
              mkdir -p apk-build
              curl -L -o apk-build/app.apk "$BUILD_URL"
              ls -la apk-build/
            else
              echo "No build URL found"
              cat build_info.json
              exit 1
            fi

      - store_artifacts:
          path: apk-build
          destination: android-apk
