version: 2.1

orbs:
  node: circleci/node@5.1.0

workflows:
  build-and-test:
    jobs:
      - lint-and-test
      - build-expo:
          requires:
            - lint-and-test
      - build-apk:
          requires:
            - build-expo
          filters:
            branches:
              only:
                - main

jobs:
  lint-and-test:
    docker:
      - image: cimg/node:18.20
    steps:
      - checkout
      
      # Yarn 4.9.1 설정 (Corepack 사용)
      - run:
          name: Setup Yarn 4.9.1
          command: |
            mkdir -p ~/.corepack
            corepack enable --install-directory ~/.corepack
            echo 'export PATH="$HOME/.corepack:$PATH"' >> $BASH_ENV
            source $BASH_ENV
            corepack prepare yarn@4.9.1 --activate
            yarn --version
            yarn config set nodeLinker node-modules
      
      # 의존성 설치
      - run:
          name: Install Dependencies
          command: |
            yarn install --immutable
            # node_modules 캐시 클리어 (Metro 호환성 문제 해결)
            rm -rf node_modules/.cache
            # Expo SDK 53이 자동으로 Metro 버전을 관리하도록 함
            # Metro 패키지들을 수동으로 설치하지 않고 Expo가 호환되는 버전을 선택하도록 함
            # Expo CLI를 프로젝트 의존성으로 설치
            yarn add -D @expo/cli
          
      # TypeScript 타입 체크
      - run:
          name: TypeScript Type Check
          command: yarn tsc --noEmit
          
      # ESLint 검사
      - run:
          name: Run ESLint
          command: yarn lint
          
      # 테스트 실행 (Jest가 설정되어 있다면)
      - run:
          name: Run Tests
          command: |
            if [ -f "jest.config.js" ] || grep -q '"test"' package.json; then
              yarn test --watchAll=false
            else
              echo "No tests found, skipping..."
            fi

  build-expo:
    docker:
      - image: cimg/node:18.20
    steps:
      - checkout
      
      # Yarn 4.9.1 설정 (Corepack 사용)
      - run:
          name: Setup Yarn 4.9.1
          command: |
            mkdir -p ~/.corepack
            corepack enable --install-directory ~/.corepack
            echo 'export PATH="$HOME/.corepack:$PATH"' >> $BASH_ENV
            source $BASH_ENV
            corepack prepare yarn@4.9.1 --activate
            yarn --version
            yarn config set nodeLinker node-modules
            
      # 의존성 설치
      - run:
          name: Install Dependencies
          command: |
            yarn install --immutable
            # node_modules 캐시 클리어 (Metro 호환성 문제 해결)
            rm -rf node_modules/.cache
            # Expo SDK 53이 자동으로 Metro 버전을 관리하도록 함
            # Metro 패키지들을 수동으로 설치하지 않고 Expo가 호환되는 버전을 선택하도록 함
            # Expo CLI를 프로젝트 의존성으로 설치
            yarn add -D @expo/cli
          
      # Expo CLI 설치 및 인증
      - run:
          name: Install Expo CLI
          command: |
            # Yarn Berry에서는 global 명령어가 제거됨
            # yarn dlx를 사용하여 임시로 설치하고 실행
            echo "Expo CLI는 yarn dlx로 실행됩니다"
          
      - run:
          name: Expo Authentication
          command: |
            # EXPO_TOKEN 환경변수 확인 및 설정
            echo "Checking EXPO_TOKEN environment variable..."
            if [ -z "$EXPO_TOKEN" ]; then
              echo "ERROR: EXPO_TOKEN environment variable is not set"
              exit 1
            fi
            
            # Expo 환경변수 명시적 설정
            export EXPO_TOKEN=$EXPO_TOKEN
            echo "EXPO_TOKEN is set (length: ${#EXPO_TOKEN})"
            
            # 인증 상태 확인 (프로젝트에 설치된 CLI 사용)
            yarn expo whoami || echo "Authentication failed, but continuing..."
          
      # Expo 프로젝트 빌드 (모바일 전용: Android + iOS)
      - run:
          name: Build Expo Android
          command: |
            export NODE_OPTIONS="--max-old-space-size=4096"
            export EXPO_TOKEN=$EXPO_TOKEN
            yarn expo export --platform android
            
      - run:
          name: Build Expo iOS
          command: |
            export NODE_OPTIONS="--max-old-space-size=4096"
            export EXPO_TOKEN=$EXPO_TOKEN
            yarn expo export --platform ios
            
      # 빌드 결과물 저장
      - store_artifacts:
          path: dist
          destination: expo-mobile-builds
          
      # 캐시 저장
      - save_cache:
          key: expo-build-{{ .Branch }}-{{ .Revision }}
          paths:
            - dist

  build-apk:
    docker:
      - image: cimg/node:18.20
    steps:
      - checkout

      # Yarn 4.9.1 설정 (Corepack 사용)
      - run:
          name: Setup Yarn 4.9.1
          command: |
            mkdir -p ~/.corepack
            corepack enable --install-directory ~/.corepack
            echo 'export PATH="$HOME/.corepack:$PATH"' >> $BASH_ENV
            source $BASH_ENV
            corepack prepare yarn@4.9.1 --activate
            yarn --version
            yarn config set nodeLinker node-modules

      # 의존성 설치
      - run:
          name: Install Dependencies
          command: |
            yarn install --immutable
            # node_modules 캐시 클리어 (Metro 호환성 문제 해결)
            rm -rf node_modules/.cache
            # Expo SDK 53이 자동으로 Metro 버전을 관리하도록 함
            # Metro 패키지들을 수동으로 설치하지 않고 Expo가 호환되는 버전을 선택하도록 함
            # Expo CLI를 프로젝트 의존성으로 설치
            yarn add -D @expo/cli

      # EAS CLI 설치
      - run:
          name: Install EAS CLI
          command: yarn add -D eas-cli

      # Expo 인증 (EXPO_TOKEN 환경변수 사용)
      - run:
          name: Expo Authentication
          command: |
            # EXPO_TOKEN 환경변수 확인 및 설정
            echo "Checking EXPO_TOKEN environment variable..."
            if [ -z "$EXPO_TOKEN" ]; then
              echo "ERROR: EXPO_TOKEN environment variable is not set"
              exit 1
            fi

            # Expo 환경변수 명시적 설정
            export EXPO_TOKEN=$EXPO_TOKEN
            echo "EXPO_TOKEN is set (length: ${#EXPO_TOKEN})"

            # 인증 상태 확인 (프로젝트에 설치된 CLI 사용)
            yarn eas whoami || echo "Authentication check failed, but continuing..."

      # APK 빌드 실행 (백그라운드)
      - run:
          name: Start Android APK Build
          command: |
            export NODE_OPTIONS="--max-old-space-size=4096"
            export EXPO_TOKEN=$EXPO_TOKEN
            # 빌드 시작하고 Build ID 저장 (업로드만 하고 대기하지 않음)
            echo "Starting EAS Build upload and initialization..."
            yarn eas build --platform android --profile apk --non-interactive --no-wait --json > build_result.json
            BUILD_ID=$(cat build_result.json | jq -r '.id')
            echo "Build started with ID: $BUILD_ID"
            echo $BUILD_ID > build_id.txt
            echo "Build upload completed and queued for processing."
            echo "Build will be monitored in the next step..."
          no_output_timeout: 10m

      # 빌드 완료 대기 (폴링 방식)
      - run:
          name: Wait for Build Completion
          command: |
            export EXPO_TOKEN=$EXPO_TOKEN
            BUILD_ID=$(cat build_id.txt)
            echo "Waiting for build $BUILD_ID to complete..."
            
            # 최대 90분 대기 (2분마다 체크) - EAS 무료 계정 큐 대기시간 고려
            for i in {1..45}; do
              echo "===== Build Status Check $i/45 ====="
              STATUS=$(yarn eas build:list --build-id $BUILD_ID --json | jq -r '.[0].status')
              CURRENT_TIME=$(date)
              echo "Current time: $CURRENT_TIME"
              echo "Build ID: $BUILD_ID"
              echo "Build status: $STATUS"
              
              if [ "$STATUS" = "finished" ]; then
                echo "🎉 Build completed successfully!"
                break
              elif [ "$STATUS" = "errored" ] || [ "$STATUS" = "canceled" ]; then
                echo "❌ Build failed with status: $STATUS"
                echo "Check logs: https://expo.dev/accounts/parkseohoo/projects/RC_BUILD_TEST/builds/$BUILD_ID"
                exit 1
              elif [ "$STATUS" = "in-queue" ]; then
                echo "⏳ Build is waiting in queue..."
              elif [ "$STATUS" = "in-progress" ]; then
                echo "🔄 Build is in progress..."
              else
                echo "📋 Build status: $STATUS"
              fi
              
              echo "Next check in 2 minutes..."
              echo "========================================="
              
              # 2분 대기 (더 자주 체크하여 출력 유지)
              sleep 120
            done
            
            # 최종 상태 확인
            FINAL_STATUS=$(yarn eas build:list --build-id $BUILD_ID --json | jq -r '.[0].status')
            if [ "$FINAL_STATUS" != "finished" ]; then
              echo "Build did not complete within 90 minutes. Status: $FINAL_STATUS"
              echo "EAS Build queue may be experiencing delays. Check: https://expo.dev/accounts/parkseohoo/projects/RC_BUILD_TEST/builds"
              exit 1
            fi
          no_output_timeout: 95m

      # 빌드 결과 다운로드 및 저장
      - run:
          name: Download APK
          command: |
            export EXPO_TOKEN=$EXPO_TOKEN
            BUILD_ID=$(cat build_id.txt)
            
            # 특정 빌드 ID로 빌드 정보 가져오기
            yarn eas build:list --build-id $BUILD_ID --json > build_info.json
            BUILD_URL=$(cat build_info.json | jq -r '.[0].artifacts.buildUrl')
            
            if [ "$BUILD_URL" != "null" ] && [ "$BUILD_URL" != "" ]; then
              mkdir -p apk-build
              curl -L -o apk-build/app.apk "$BUILD_URL"
              echo "APK downloaded successfully from: $BUILD_URL"
              ls -la apk-build/
            else
              echo "No build URL found for build ID: $BUILD_ID"
              cat build_info.json
              exit 1
            fi

      # APK 아티팩트 저장
      - store_artifacts:
          path: apk-build
          destination: android-apk

      # 캐시 저장
      - save_cache:
          key: eas-build-{{ .Branch }}-{{ .Revision }}
          paths:
            - node_modules